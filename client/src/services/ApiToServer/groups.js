/**
 * üéì STUDENT GROUPS API SERVICE
 * 
 * –ù–∞–±–æ—Ä —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
 * –í—Å–µ –º–µ—Ç–æ–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç Promises –∏ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Å await
 */

/**
 * üìö –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–µ–±–Ω—ã—Ö –≥—Ä—É–ø–ø
 * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –≥—Ä—É–ø–ø
 * @throws {Error} –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö
 * 
 * @example
 * try {
 *   const groups = await getStudentGroups();
 *   console.log(groups);
 * } catch (error) {
 *   console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø:', error);
 * }
 */
export async function getStudentGroups() {   
    try {
        const response = await fetch("https://hexletkb.ru:5002/api/student/groups");
        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(
                data.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø"
            );
        }

        return data.groups;
    } catch (error) {
        console.error("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞:", error);
        throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ
    }
}

/**
 * ‚ûï –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É
 * @param {string} name - –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
 * @returns {Promise<Object>} –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
 * @throws {Error} –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
 * 
 * @example
 * await addGroup('–ò–°–¢-401');
 */
export async function addGroup(name) {
    try {
        const response = await fetch("https://hexletkb.ru:5002/api/student/groups/new", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ name })
        });
        
        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(data.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã");
        }
        
        return data;
    } catch (error) {
        console.error("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:", error);
        throw error;
    }
}

/**
 * ‚úèÔ∏è –û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
 * @param {number|string} id - ID –≥—Ä—É–ø–ø—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @param {string} name - –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
 * @returns {Promise<boolean>} true –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, false –ø—Ä–∏ –æ—à–∏–±–∫–µ
 * 
 * @example
 * const success = await updateGroup(5, '–ò–°–¢-402');
 * if (success) alert('–ì—Ä—É–ø–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
 */
export const updateGroup = async (id, name) => {
    try {
        const response = await fetch(`https://hexletkb.ru:5002/api/student/groups/update`, {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ id, name }),
        });
        
        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(data.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã");
        }
        
        return true;
    } catch (error) {
        console.error("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:", error);
        return false;
    }
};

/**
 * üóëÔ∏è –£–¥–∞–ª—è–µ—Ç —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É
 * @param {number|string} id - ID –≥—Ä—É–ø–ø—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
 * @returns {Promise<boolean>} true –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, false –ø—Ä–∏ –æ—à–∏–±–∫–µ
 * 
 * @example
 * if (await deleteGroup(5)) {
 *   console.log('–ì—Ä—É–ø–ø–∞ —É–¥–∞–ª–µ–Ω–∞');
 * }
 */
export async function deleteGroup(id) {
    try {
        const response = await fetch(`https://hexletkb.ru:5002/api/student/groups/delete/${id}`, {
            method: "DELETE",
        });
        
        const data = await response.json();
        
        if (!response.ok) {
            throw new Error(data.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã");
        }
        
        return true;
    } catch (error) {
        console.error("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã:", error);
        return false;
    }
}