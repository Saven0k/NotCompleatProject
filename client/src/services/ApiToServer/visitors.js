/**
 * ‚ûï –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
 * @returns {Promise<void>}
 * @throws {Error} –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è
 * 
 * @example
 * try {
 *   await addVisitor();
 *   console.log('–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω');
 * } catch (error) {
 *   console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è:', error);
 * }
 */
export async function addVisitor() {
    try {
        const response = await fetch("https://hexletkb.ru:5002/api/visitors/add", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è");
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è:", error);
        throw error;
    }
}

/**
 * üî¢ –ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
 * @returns {Promise<number>} –û–±—â–µ–µ —á–∏—Å–ª–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π
 * @throws {Error} –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
 * 
 * @example
 * try {
 *   const count = await getVisitorsCount();
 *   console.log(`–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: ${count}`);
 * } catch (error) {
 *   console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π:', error);
 * }
 */
export async function getVisitorsCount() {
    try {
        const response = await fetch("https://hexletkb.ru:5002/api/visitors/all");
        const data = await response.json();

        if (!response.ok) {
            throw new Error(
                data.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π"
            );
        }

        return data.data;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π:", error);
        throw error;
    }
}