/**
 * üîê ROLES MANAGEMENT API
 * 
 * –ù–∞–±–æ—Ä –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏ –≤ —Å–∏—Å—Ç–µ–º–µ
 * –í—Å–µ –º–µ—Ç–æ–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç Promises –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç async/await
 */

/**
 * üìã –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–æ–ª–µ–π
 * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Ä–æ–ª–µ–π
 * @throws {Error} –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É
 * 
 * @example
 * try {
 *   const roles = await getRoles();
 *   console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:', roles);
 * } catch (error) {
 *   console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–æ–ª–µ–π', error);
 * }
 */
export async function getRoles() {
    try {
        const response = await fetch("https://hexletkb.ru:5002/api/roles");
        const data = await response.json();

        if (!response.ok) {
            throw new Error(
                data.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π"
            );
        }

        return data.roles;
    } catch (error) {
        console.error("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π:", error);
        throw error; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –≤—ã–∑—ã–≤–∞—é—â–µ–º –∫–æ–¥–µ
    }
}

/**
 * ‚ûï –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Ä–æ–ª—å
 * @param {string} name - –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–æ–ª–∏
 * @returns {Promise<Object>} –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ä–æ–ª–∏
 * @throws {Error} –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è
 * 
 * @example
 * await addRole('moderator');
 */
export async function addRole(name) {
    try {
        const response = await fetch("https://hexletkb.ru:5002/api/roles/new", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ name })
        });

        const data = await response.json();

        if (!response.ok) {
            throw new Error(data.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–ª–∏");
        }

        return data;
    } catch (error) {
        console.error("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏:", error);
        throw error;
    }
}

/**
 * ‚úèÔ∏è –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ä–æ–ª—å
 * @param {string|number} id - ID —Ä–æ–ª–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @param {string} name - –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
 * @returns {Promise<boolean>} true - –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, false - –ø—Ä–∏ –æ—à–∏–±–∫–µ
 * 
 * @example
 * const success = await updateRole(3, 'supervisor');
 * if (success) console.log('–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
 */
export const updateRole = async (id, name) => {
    try {
        const response = await fetch(`https://hexletkb.ru:5002/api/roles/update`, {
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ id, name }),
        });

        const data = await response.json();

        if (!response.ok) {
            throw new Error(data.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏");
        }

        return true;
    } catch (error) {
        console.error(`üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ ${id}:`, error);
        return false;
    }
};

/**
 * üóëÔ∏è –£–¥–∞–ª—è–µ—Ç —Ä–æ–ª—å
 * @param {string|number} id - ID —Ä–æ–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
 * @returns {Promise<boolean>} true - –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, false - –ø—Ä–∏ –æ—à–∏–±–∫–µ
 * 
 * @example
 * if (await deleteRole(2)) {
 *   console.log('–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
 * }
 */
export async function deleteRole(id) {
    try {
        const response = await fetch(`https://hexletkb.ru:5002/api/roles/delete/${id}`, {
            method: "DELETE",
        });

        const data = await response.json();

        if (!response.ok) {
            throw new Error(data.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏");
        }

        return true;
    } catch (error) {
        console.error(`üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏ ${id}:`, error);
        return false;
    }
}